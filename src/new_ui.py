
# Form implementation generated from reading ui file 'tt.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QPushButton, QLabel,
    QVBoxLayout, QHBoxLayout, QStackedWidget, QLineEdit, QTextEdit,
    QFrame, QScrollArea,QSizePolicy,QGridLayout,QFileDialog,QMessageBox,QComboBox
)
from PyQt5.QtGui import QIcon,QFont,QPixmap,QMovie
from PyQt5.QtCore import Qt
import json
import os
from PyQt5.QtCore import pyqtSignal
import time as t
import utils
from new_core import Main_utils_page
from device_card import DeviceCard
DEVICE_FILE = "devices.json"
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.tts = utils.tts_main()
        self.isEditing = False
        self.isEditingDevName = ''
        self.my_style = """
        
    QLineEdit {
        border: 1px solid #ccc;
        border-radius: 6px;
        padding: 6px 10px;
        background-color:#008a91;
        color: #333;
        font-size: 14px;
    }

    QLineEdit:focus {
        border: 1px solid #0078d7;  /* Blue border on focus */
        background-color: #ffffff;
    }

    QLineEdit::placeholder {
        color: #999;
    }
    QPushButton { 
        padding: 5px 10px; 
        border-radius: 5px; 
        background-color: #4CAF50; 
        color: white; 
 } 
 QLabel{
    color: white;
 
 }

"""     
        self.btn_sheet=''' 
QPushButton {
    color: rgb(255, 255, 255);
    background-color:  #272757 ;   
    border: 0px solid;
    text-align:center;  
    border-radius : 10px
}
QPushButton:hover {
    background-color: #9575cd;
    font-size:17px; 
    border-radius : 10px;
    margin : 5px;
}
'''     
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 500)
        MainWindow.setMinimumSize(QtCore.QSize(1000, 500))
        MainWindow.setStyleSheet("background-color: #241A42;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #self.centralwidget.setStyleSheet()
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Top_Bar = QtWidgets.QFrame(self.centralwidget)
        self.Top_Bar.setMaximumSize(QtCore.QSize(16777215, 30))
        self.Top_Bar.setStyleSheet("background-color:#2C224D;")
        self.Top_Bar.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Top_Bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Top_Bar.setObjectName("Top_Bar")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.Top_Bar)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_toggle = QtWidgets.QFrame(self.Top_Bar)
        self.frame_toggle.setMaximumSize(QtCore.QSize(100, 30))
       
        self.frame_toggle.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_toggle.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_toggle.setObjectName("frame_toggle")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_toggle)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Btn_Toggle = QtWidgets.QLabel(self.frame_toggle)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_Toggle.sizePolicy().hasHeightForWidth())
        self.Btn_Toggle.setSizePolicy(sizePolicy)

        self.pixmap1 = QPixmap('src/assets/logo.png') 
        self.Btn_Toggle.setPixmap(self.pixmap1)
        self.Btn_Toggle.setScaledContents(True)
        self.Btn_Toggle.setStyleSheet("background-color: #272757;")
       
        self.Btn_Toggle.setObjectName("Btn_Toggle")
        self.verticalLayout_2.addWidget(self.Btn_Toggle)
        self.horizontalLayout.addWidget(self.frame_toggle)
        self.frame_top = QtWidgets.QFrame(self.Top_Bar)
        self.frame_top.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top.setObjectName("frame_top")
        self.horizontalLayout.addWidget(self.frame_top)
        self.verticalLayout.addWidget(self.Top_Bar)
        self.Content = QtWidgets.QFrame(self.centralwidget)
        self.Content.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Content.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Content.setObjectName("Content")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.Content)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_left_menu = QtWidgets.QFrame(self.Content)
        self.frame_left_menu.setMinimumSize(QtCore.QSize(130, 0))
        self.frame_left_menu.setMaximumSize(QtCore.QSize(130, 16777215))
        # self.frame_left_menu.setStyleSheet("background-color:    rgb(35, 35, 35);")
        self.frame_left_menu.setStyleSheet("background-color: #272757;")
        self.frame_left_menu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_left_menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_left_menu.setObjectName("frame_left_menu")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_left_menu)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_top_menus = QtWidgets.QFrame(self.frame_left_menu)
        self.frame_top_menus.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_top_menus.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top_menus.setObjectName("frame_top_menus")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_top_menus)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.btn_home_page = QtWidgets.QPushButton(self.frame_top_menus)
        self.btn_home_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_home_page.setStyleSheet(self.btn_sheet)
        self.btn_home_page.setObjectName("btn_home_page")
        self.btn_home_page.setIcon(QIcon('src/assets/list.svg'))
        
        self.btn_new_page = QtWidgets.QPushButton(self.frame_top_menus)
        self.btn_new_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_new_page.setStyleSheet(self.btn_sheet)
        self.btn_new_page.setObjectName("btn_new_page")
        self.btn_new_page.setIcon(QIcon('src/assets/add.svg'))
       
        self.btn_sttings_page = QtWidgets.QPushButton(self.frame_top_menus)
        self.btn_sttings_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_sttings_page.setStyleSheet(self.btn_sheet)
        self.btn_sttings_page.setObjectName("btn_sttings_page")
        self.btn_sttings_page.setIcon(QIcon('src/assets/settings.svg'))

        self.btn_general_page = QtWidgets.QPushButton(self.frame_top_menus)
        self.btn_general_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_general_page.setStyleSheet(self.btn_sheet)
        self.btn_general_page.setObjectName("btn_general_page")
        self.btn_general_page.setIcon(QIcon('src/assets/speak.svg'))

        self.btn_sched_page = QtWidgets.QPushButton(self.frame_top_menus)
        self.btn_sched_page.setMinimumSize(QtCore.QSize(0,40))
        self.btn_sched_page.setStyleSheet(self.btn_sheet)
        self.btn_sched_page.setIcon(QIcon('src/assets/Timer.svg'))
        for widget in [self.btn_home_page,self.btn_new_page,self.btn_general_page,self.btn_sched_page,self.btn_sttings_page]:
            self.verticalLayout_4.addWidget(widget)
        self.verticalLayout_3.addWidget(self.frame_top_menus, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_2.addWidget(self.frame_left_menu)
        self.frame_pages = QtWidgets.QFrame(self.Content)
        self.frame_pages.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_pages.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_pages.setObjectName("frame_pages")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_pages)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_pages)
        self.stackedWidget.setObjectName("stackedWidget")
        self.stackedWidget.setStyleSheet('background-color : #120C26 ;')
        self.page1 = self.home_page()
        self.page2 = self.add_page()
        self.page3 = self.sched_page()
        self.page4 = self.use_page()
        self.stackedWidget.addWidget(self.page1)
        self.stackedWidget.addWidget(self.page2)
        self.stackedWidget.addWidget(self.page3)
        self.stackedWidget.addWidget(self.page4)
        self.verticalLayout_5.addWidget(self.stackedWidget)
        self.horizontalLayout_2.addWidget(self.frame_pages)
        self.verticalLayout.addWidget(self.Content)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.btn_home_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page1))
        self.btn_new_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page2))
        self.btn_sched_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page3))
        self.btn_general_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page4))
# home page        
    def home_page(self):
        print("home page")
        page = QWidget()
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        container = QWidget()
        grid_layout = QGridLayout()
        try:
         with open (DEVICE_FILE , "r") as file:
            devices = json.load(file)
            print("json document parsing")
        except Exception as e:
            devices = []
            print(e)
        row = 0
        col = 0
        for i, device in enumerate(devices):
            card = DeviceCard(device)
            card.config_signal.connect(self.edit_page)
            card.use_signal.connect(self.settings_page)
            grid_layout.addWidget(card, row, col)

            col += 1
            if col == 3:  # 3 cards per row, change if you want more or fewer
                col = 0
                row += 1

        container.setLayout(grid_layout)
        scroll.setWidget(container)
        layout = QVBoxLayout()
        layout.addWidget(scroll)
        page.setLayout(layout)
        return page
#config page
    def add_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(20) 
        layout.setContentsMargins(0, 0, 0, 0)
        self.input_name = QLineEdit()
        self.input_name.setPlaceholderText("Device Name")
        self.input_ip = QLineEdit()
        self.input_ip.setPlaceholderText("IP Address")
        self.input_port = QLineEdit()
        self.input_port.setPlaceholderText("Port")
        self.input_dlt = QLineEdit()
        self.input_dlt.setPlaceholderText("input DLT  path")
        self.input_dlt.mousePressEvent =lambda event , input=self.input_dlt:self.file(event,self.input_dlt)
        self.input_adb = QLineEdit()
        self.input_adb.setPlaceholderText("input ADB path")
        self.input_adb.mousePressEvent = lambda event , input=self.input_adb:self.file(event,self.input_adb)
        self.save_btn = QPushButton("Save Device")
        self.save_btn.setFixedHeight(36)
        self.save_btn.setStyleSheet(self.my_style)
        self.save_btn.setFixedWidth(150)
        self.save_btn.clicked.connect(self.save_device)
        for widget in [self.input_name, self.input_ip, self.input_port, self.input_dlt,self.input_adb, self.save_btn]:
            widget.setStyleSheet(self.my_style)
            layout.addWidget(widget)
        layout.addStretch()
        page.setLayout(layout)
        return page
 #edit page will be loaded after this 
    def edit_page(self,device):
        self.isEditing = True
        self.isEditingDevName = device["name"]
        print("Editing device:", device)
        self.E_page = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(0, 0, 0, 0)

        self.input_name = QLineEdit(device.get("name", ""))
        self.input_ip = QLineEdit(device.get("ip", ""))
        self.input_port = QLineEdit(device.get("port", ""))
        self.input_dlt = QLineEdit(device.get("dlt_path", ""))
        self.input_adb = QLineEdit(device.get("adb_path", ""))

        for input_field in [self.input_dlt, self.input_adb]:
            input_field.mousePressEvent = lambda event, input=input_field: self.file(event, input)

        for field in [self.input_name, self.input_ip, self.input_port, self.input_dlt, self.input_adb]:
            field.setStyleSheet(self.my_style)

        self.save_btn = QPushButton("Save Device")
        self.save_btn.setFixedWidth(100)
        self.save_btn.setStyleSheet(self.my_style)
        self.save_btn.clicked.connect(self.save_device)

        for widget in [self.input_name, self.input_ip, self.input_port, self.input_dlt, self.input_adb, self.save_btn]:
            layout.addWidget(widget)

        layout.addStretch()
        self.E_page.setLayout(layout)

        self.stackedWidget.addWidget(self.E_page)
        self.stackedWidget.setCurrentWidget(self.E_page)

    def clear_form(self):
        self.input_name.clear()
        self.input_ip.clear()
        self.input_port.clear()
        self.input_adb.clear()
        self.input_dlt.clear()
#settings page        
    def sched_page(self):
        page = Main_utils_page().page
        self.stackedWidget.addWidget(page)
        self.stackedWidget.setCurrentWidget(page)
        return page
    def use_page(self):
        self.E_page = QWidget()
        main_layout = QVBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)
        # === TOP HALF ===
        top_half = QWidget()
        top_layout = QHBoxLayout()
        top_layout.setSpacing(20)
        # --- LEFT
        left_layout = QVBoxLayout()
        left_layout.setSpacing(10)
        self.label = QLabel("Input Custom Words to Speak")
        self.Input_words = QLineEdit()
        self.Input_words.setPlaceholderText("Input words to speak")
        self.btn_speak = QPushButton("Speak")
        self.btn_speak.setFixedWidth(100)
        self.btn_speak.clicked.connect(self.start_speak)

        self.label_excel = QLabel("Use Custom Excel File")
        self.Input_excel = QLineEdit()
        self.Input_excel.setPlaceholderText("Input Excel file path")
        self.Input_excel.mousePressEvent= lambda event, input=self.Input_excel: self.file(event, input)
        self.btn_speak_excel = QPushButton("Start")
        self.btn_speak_excel.setFixedWidth(100)
        self.btn_speak_excel.clicked.connect(self.start_file)

        for field in [self.label, self.Input_words, self.btn_speak,
                      self.label_excel, self.Input_excel, self.btn_speak_excel]:
            field.setStyleSheet(self.my_style)
            left_layout.addWidget(field)
        left_layout.addStretch()

        # --- RIGHT (30%)
        right_layout = QVBoxLayout()
        self.movie = QMovie('/home/adin/Desktop/p3V1/Python_testing/src/dj.gif')
        self.gif_label = QLabel("Music GIF here")
        self.gif_label.setFixedSize(200, 150)
        #self.gif_label.setStyleSheet("border: 1px solid gray;")
        self.gif_label.setMovie(self.movie)
        self.gif_label.setScaledContents(True)
        self.movie.start()
        self.tts_selector = QComboBox()
        self.tts_selector.addItems(["pyttsx3", "gTTS"])
        self.tts_selector.setStyleSheet("background-color: #48872B")
        right_layout.addWidget(self.gif_label, alignment=Qt.AlignCenter)
        right_layout.addWidget(self.tts_selector)
        right_layout.addStretch()
        top_layout.addLayout(left_layout)
        top_layout.addLayout(right_layout)
        top_half.setLayout(top_layout)

        # === BOTTOM HALF ===
        bottom_half = QWidget()
        bottom_layout = QVBoxLayout()
        self.bottom_label = QLabel("Temporary Area")
        self.bottom_label.setAlignment(Qt.AlignCenter)
        bottom_layout.addWidget(self.bottom_label)
        bottom_half.setLayout(bottom_layout)

        # === Final Composition ===
        main_layout.addWidget(top_half, 1)
        main_layout.addWidget(bottom_half, 1)

        self.E_page.setLayout(main_layout)
        return self.E_page
        #self.stackedWidget.addWidget(self.E_page)
        #self.stackedWidget.setCurrentWidget(self.E_page)


# #save device function called from config and edit pages
    def save_device(self):
        dev_name = self.input_name.text().strip()
        dev_ip = self.input_ip.text().strip()
        dev_port = self.input_port.text().strip()
        dev_dlt = self.input_dlt.text().strip()
        dev_adb = self.input_adb.text().strip()
        print(dev_name,dev_ip,dev_dlt,dev_adb,dev_port)
        if not os.path.exists(DEVICE_FILE) or os.stat(DEVICE_FILE).st_size == 0:
         with open(DEVICE_FILE, 'w') as f:
            f.write('[]')
        if dev_name and dev_ip :
            device_data = {
                "name": dev_name,
                "ip": dev_ip,
                "port": dev_port,
                "dlt_path": dev_dlt,
                "adb_path" : dev_adb
            }
        #device data holds each dict
        #devices hold the whole list
    
        with open(DEVICE_FILE , "r") as device_file:
            try:
                devices = json.load(device_file)
            except json.JSONDecodeError:
                devices = []
                
            #devices.append(device_data)    #removing beacuse we dont want duplicates due to editing
        if self.isEditing :
            for index,dev in enumerate(devices):
                if dev["name"] == self.isEditingDevName:
                    devices[index] = device_data
                    break
        else:
            devices.append(device_data)
        with open(DEVICE_FILE , "w") as file:
            json.dump(devices,file,indent=4)
            print("saving to json file")
        
        self.clear_form()
        self.new_page = self.home_page()
        self.stackedWidget.addWidget(self.new_page)
        self.stackedWidget.setCurrentWidget(self.new_page)

    def file(self,event,input):
      file_dialog = QFileDialog()
      file_dialog.setWindowTitle("Open File")
      file_dialog.setFileMode(QFileDialog.FileMode.ExistingFile)
      file_dialog.setViewMode(QFileDialog.ViewMode.Detail)
      if file_dialog.exec():
         selected_files = file_dialog.selectedFiles()
         print("Selected File:", selected_files[0])
         input.setText(selected_files[0])
    
    def start_speak(self):
        text = self.Input_words.text()
        if text == '':
            self.tts.warn(mesg="സംസാരിക്കാൻ എന്തെങ്കിലും ടെക്സ്റ്റ് നൽകുക")
            return
        else :
            # self.movie.start()
            self.tts.tts_converter(text)
            t.sleep(3)
        # self.movie.stop()
    def start_file(self):
        file_path = self.Input_excel.text()
        if file_path == '':
            self.tts.warn(mesg="തുടങ്ങാൻ എന്തെങ്കിലും കൊടുക്കൂ. ബാക്കി നമുക്ക് പിന്നീട് ചെയ്യാം")
            return
        else:
            if file_path.endswith('xlsx' or 'xls'):
                print("excel file found")
                self.tts.file_iter(file_path=file_path)
            else:
                self.tts.warn(mesg="ശരിയായ എക്സൽ ഫയൽ നൽകുക")
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_home_page.setText(_translate("MainWindow", "Home"))
        self.btn_new_page.setText(_translate("MainWindow", "Add a Device"))
        self.btn_sttings_page.setText(_translate("MainWindow", "Settings"))
        self.btn_general_page.setText(_translate("MainWindow", " TTS Speech"))
        self.btn_sched_page.setText(_translate('MainWindow','Scheduler'))
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


# Form implementation generated from reading ui file 'tt.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import (
    QApplication, QMessageBox, QWidget, QPushButton, QLabel,
    QVBoxLayout, QHBoxLayout, QGraphicsOpacityEffect, QLineEdit, QGraphicsBlurEffect,
    QFrame, QScrollArea,QSizePolicy,QGridLayout,QFileDialog,QGroupBox,QComboBox
)
from PyQt5.QtGui import QIcon,QFont,QPixmap,QMovie
from PyQt5.QtCore import Qt
import json
import os
from PyQt5.QtCore import pyqtSignal
import time as t
import utils
from Task_sched_automate_UI import Main_utils_page
from device_card import DeviceCard
from rack_control_ui import ButtonControl
from styles import *

DEVICE_FILE = "devices.json"
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.tts = utils.tts_main()
        MainWindow.setStyleSheet("""
            QMainWindow {
               background-color :#2B2B2B
            }
        """)
        self.isEditing = False
        self.isEditingDevName = ''
        self.my_style = """
        
    QLineEdit {
        border: 1px solid #ccc;
        border-radius: 6px;
        padding: 6px 10px;
        background-color:#B3B3B3;
        color: #333;
        font-size: 14px;
    }

    QLineEdit:focus {
        border: 1px solid #0078d7;  /* Blue border on focus */
        background-color: #ffffff;
    }

    QLineEdit::placeholder {
        color: #999;
    }
    QPushButton { 
        padding: 5px 10px; 
        border-radius: 5px; 
        background-color: #4CAF50; 
        color: white; 
 } 
 QLabel{
    color: white;
 
 }

"""     
    
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 600)
        # MainWindow.setStyleSheet("background-image: url('C:/Users/jithin.sreekala/OneDrive - Acsia Technologies Private Limited/Desktop/POC/Poc_from_gitHub/Python_testing/src/assets/bck.jpg')")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #self.centralwidget.setStyleSheet()
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Top_Bar = QtWidgets.QFrame(self.centralwidget)
        self.Top_Bar.setMaximumSize(QtCore.QSize(16777215, 30))
        self.Top_Bar.setStyleSheet("background:transparent;")
        self.Top_Bar.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Top_Bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Top_Bar.setObjectName("Top_Bar")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.Top_Bar)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_toggle = QtWidgets.QFrame(self.Top_Bar)
        self.frame_toggle.setMaximumSize(QtCore.QSize(100, 30))
       
        self.frame_toggle.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_toggle.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_toggle.setObjectName("frame_toggle")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_toggle)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        
        self.Btn_Toggle = QtWidgets.QLabel(self.frame_toggle)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_Toggle.sizePolicy().hasHeightForWidth())
        self.Btn_Toggle.setSizePolicy(sizePolicy)
        self.Btn_Toggle.setScaledContents(True)
        self.Btn_Toggle.setStyleSheet("background : transparent;")
       
        self.Btn_Toggle.setObjectName("Btn_Toggle")
        self.verticalLayout_2.addWidget(self.Btn_Toggle)
        self.horizontalLayout.addWidget(self.frame_toggle)
        self.frame_top = QtWidgets.QFrame(self.Top_Bar)
        self.frame_top.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top.setObjectName("frame_top")
        self.frame_top.setStyleSheet("background : transparent")
        opacity_effect = QGraphicsOpacityEffect()
        opacity_effect.setOpacity(0.0)
        self.frame_top.setGraphicsEffect(opacity_effect)
        self.horizontalLayout.addWidget(self.frame_top)
        self.verticalLayout.addWidget(self.Top_Bar)
        self.Content = QtWidgets.QFrame(self.centralwidget)
        self.Content.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Content.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Content.setObjectName("Content")
        # self.Content.setStyleSheet("background : transparent")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.Content)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_left_menu = QtWidgets.QFrame(self.Content)
        self.frame_left_menu.setMinimumSize(QtCore.QSize(150, 0))
        self.frame_left_menu.setMaximumSize(QtCore.QSize(150, 16777215))
        # self.frame_left_menu.setStyleSheet("background-color:    rgb(35, 35, 35);")
        self.frame_left_menu.setStyleSheet("background : transparent;")
        self.frame_left_menu.setStyleSheet("background-color: #2B2B2B;")
        self.frame_left_menu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_left_menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_left_menu.setObjectName("frame_left_menu")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_left_menu)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_top_menus = QtWidgets.QFrame(self.frame_left_menu)
        self.frame_top_menus.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_top_menus.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top_menus.setObjectName("frame_top_menus")
    
        # self.frame_top_menus.setGraphicsEffect(blur_effect)
        self.frame_top_menus.setStyleSheet("background : transparent")
        
        # Sidebar layout
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_top_menus)
        
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(4)  # Small spacing between buttons
        self.verticalLayout_4.setObjectName("verticalLayout_4")

        # Sidebar style (matches app theme)
        sidebar_btn_style = """
            QPushButton {
                background : transparent;
                color: #ffffff;
                border: none;
                padding: 8px;
                text-align: left;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0c0c0;
            }
            QPushButton:pressed {
                background-color: #007ACC;
                color: white;
            }
        """

        # Create buttons
        self.btn_home_page = QtWidgets.QPushButton(" Home", self.frame_top_menus)
        self.btn_home_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_home_page.setStyleSheet(sidebar_btn_style)
        self.btn_home_page.setIcon(QIcon("src/assets/list.svg"))
        self.btn_home_page.setIconSize(QtCore.QSize(20, 20))

        self.btn_new_page = QtWidgets.QPushButton(" New Task", self.frame_top_menus)
        self.btn_new_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_new_page.setStyleSheet(sidebar_btn_style)
        self.btn_new_page.setIcon(QIcon("src/assets/add.svg"))
        self.btn_new_page.setIconSize(QtCore.QSize(20, 20))

        self.btn_general_page = QtWidgets.QPushButton(" General", self.frame_top_menus)
        self.btn_general_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_general_page.setStyleSheet(sidebar_btn_style)
        self.btn_general_page.setIcon(QIcon("src/assets/speak.svg"))
        self.btn_general_page.setIconSize(QtCore.QSize(20, 20))

        self.btn_sched_page = QtWidgets.QPushButton(" Schedule", self.frame_top_menus)
        self.btn_sched_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_sched_page.setStyleSheet(sidebar_btn_style)
        self.btn_sched_page.setIcon(QIcon("src/assets/Timer.svg"))
        self.btn_sched_page.setIconSize(QtCore.QSize(20, 20))

        self.btn_sttings_page = QtWidgets.QPushButton(" Settings", self.frame_top_menus)
        self.btn_sttings_page.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_sttings_page.setStyleSheet(sidebar_btn_style)
        self.btn_sttings_page.setIcon(QIcon("src/assets/settings.svg"))
        self.btn_sttings_page.setIconSize(QtCore.QSize(20, 20))

        # Add all buttons to sidebar
        for widget in [
            self.btn_home_page,
            self.btn_new_page,
            self.btn_general_page,
            self.btn_sched_page,
            self.btn_sttings_page
        ]:
            widget.setCursor(Qt.PointingHandCursor)  # Pointer on hover
            self.verticalLayout_4.addWidget(widget)

        # Add stretch so buttons stay at the top
        self.verticalLayout_4.addStretch()
        
        self.verticalLayout_3.addWidget(self.frame_top_menus, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_2.addWidget(self.frame_left_menu)
        self.frame_pages = QtWidgets.QFrame(self.Content)
        self.frame_pages.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_pages.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_pages.setObjectName("frame_pages")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_pages)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_pages)
        self.stackedWidget.setObjectName("stackedWidget")
        self.stackedWidget.setStyleSheet('background : transparent;')
        self.page1 = self.home_page()
        self.page2 = self.add_page()
        self.page3 = self.sched_page()
        self.page4 = self.use_page()
        self.page5 = self.rack_page()
        self.t_page = self.add_page()
        
        self.stackedWidget.addWidget(self.t_page)
        self.stackedWidget.addWidget(self.page1)
        self.stackedWidget.addWidget(self.page2)
        self.stackedWidget.addWidget(self.page3)
        self.stackedWidget.addWidget(self.page4)
        self.stackedWidget.addWidget(self.page5)
        self.verticalLayout_5.addWidget(self.stackedWidget)
        self.horizontalLayout_2.addWidget(self.frame_pages)
        self.verticalLayout.addWidget(self.Content)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.btn_home_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page1))
        self.btn_new_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page2))
        self.btn_sched_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page3))
        self.btn_general_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page4))
        self.btn_sttings_page.clicked.connect(lambda:self.stackedWidget.setCurrentWidget(self.page5))
# home page 
    def rack_page(self):
        page = QWidget()
        h_box = QHBoxLayout()
        self.card = ButtonControl()
        
        h_box.addWidget(self.card)
        page.setLayout(h_box)
    
        return page

    def home_page(self):
        page = QWidget()
        scroll = QScrollArea()
        container = QWidget()
        scroll.setWidgetResizable(True)
        grid_layout = QGridLayout()
        try:
         with open (DEVICE_FILE , "r") as file:
            devices = json.load(file)
            print("json document parsing")
        except Exception as e:
            devices = []
            print(e)
        row = 0
        col = 0
        for i, device in enumerate(devices):
            card = DeviceCard(device)
            card.config_signal.connect(self.edit_page)
            card.use_signal.connect(self.sched_page)
            grid_layout.addWidget(card, row, col)

            col += 1 
            if col == 3:  # 3 cards per row, change if you want more or fewer
                col = 0
                row += 1

        container.setLayout(grid_layout)
        layout = QVBoxLayout()
        scroll.setWidget(container )
        layout.addWidget(scroll)
        page.setLayout(layout)
        return page
#config page
    def add_page(self):
        self.page = QWidget()
        layout = QVBoxLayout(self.page)
        layout.setSpacing(20)
        layout.setContentsMargins(30, 20, 30, 20)

        # Header label
        label = QLabel("Add or Create a Device Configuration")
        label.setAlignment(Qt.AlignCenter)
        label.setStyleSheet("""
            QLabel {
                color: #FFFFFF;
                font-size: 16px;
                font-weight: bold;
            }
        """)
        layout.addWidget(label)

        # Group box for device details
        device_group = QGroupBox("Device Details")
        device_group.setStyleSheet("""
            QGroupBox {
                color: #FFFFFF;
                font-size: 13px;
                font-weight: bold;
                border: 1px solid #555555;
                border-radius: 6px;
                margin-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 0 4px;
            }
        """)
        group_layout = QVBoxLayout(device_group)
        group_layout.setSpacing(12)

        # Input style
        input_style = """
            QLineEdit {
                background-color: #3B3B3B;
                color: white;
                border: 1px solid #555555;
                border-radius: 4px;
                padding: 6px;
            }
            QLineEdit:focus {
                border: 1px solid #007ACC;
            }
        """

        # Device name, IP, Port
        self.input_name = QLineEdit()
        self.input_name.setPlaceholderText("Device Name")
        self.input_name.setStyleSheet(input_style)

        self.input_ip = QLineEdit()
        self.input_ip.setPlaceholderText("IP Address")
        self.input_ip.setStyleSheet(input_style)

        self.input_port = QLineEdit()
        self.input_port.setPlaceholderText("Port")
        self.input_port.setStyleSheet(input_style)

        group_layout.addWidget(self.input_name)
        group_layout.addWidget(self.input_ip)
        group_layout.addWidget(self.input_port)

        # File path inputs with browse buttons
        def make_path_input(placeholder, click_handler):
            container = QHBoxLayout()
            line_edit = QLineEdit()
            line_edit.setPlaceholderText(placeholder)
            line_edit.setStyleSheet(input_style)
            browse_btn = QPushButton("Browse")
            browse_btn.setCursor(Qt.PointingHandCursor)
            browse_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 6px 10px;
                }
                QPushButton:hover {
                    background-color: #3C8D40;
                }
            """)
            browse_btn.clicked.connect(lambda: click_handler(line_edit))
            container.addWidget(line_edit)
            container.addWidget(browse_btn)
            return container

        dlt_layout = make_path_input("Input DLT Path", lambda inp: self.file(None, inp))
        adb_layout = make_path_input("Input ADB Path", lambda inp: self.file(None, inp))

        group_layout.addLayout(dlt_layout)
        group_layout.addLayout(adb_layout)

        layout.addWidget(device_group)

        # Save button
        self.save_btn = QPushButton("Save Device")
        self.save_btn.setFixedHeight(36)
        self.save_btn.setCursor(Qt.PointingHandCursor)
        self.save_btn.setStyleSheet("""
            QPushButton {
                background-color: #007ACC;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 13px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #005A99;
            }
        """)
        self.save_btn.clicked.connect(self.save_device)

        layout.addWidget(self.save_btn, alignment=Qt.AlignRight)
        layout.addStretch()

        return self.page


 #edit page will be loaded after this 
    def edit_page(self, device):
        self.isEditing = True
        self.isEditingDevName = device["name"]
        print("Editing device:", device)

        self.E_page = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(16)
        layout.setContentsMargins(40, 20, 40, 20)

        # === Header ===
        label = QLabel("Edit Device Configuration")
        label.setStyleSheet("""
            font-size: 22px;
            font-weight: bold;
            color: white;
        """)
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)

        # === Input Fields ===
        input_style = """
            QLineEdit {
                background-color: #1e1e1e;
                color: white;
                border: 1px solid #555;
                border-radius: 6px;
                padding: 6px 10px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 1px solid #007ACC;
            }
        """

        self.input_name = QLineEdit(device.get("name", ""))
        self.input_name.setPlaceholderText("Device Name")
        self.input_name.setStyleSheet(input_style)

        self.input_ip = QLineEdit(device.get("ip", ""))
        self.input_ip.setPlaceholderText("IP Address")
        self.input_ip.setStyleSheet(input_style)

        self.input_port = QLineEdit(device.get("port", ""))
        self.input_port.setPlaceholderText("Port")
        self.input_port.setStyleSheet(input_style)

        self.input_dlt = QLineEdit(device.get("dlt_path", ""))
        self.input_dlt.setPlaceholderText("DLT Path")
        self.input_dlt.setStyleSheet(input_style)
        self.input_dlt.mousePressEvent = lambda event, input=self.input_dlt: self.file(event, self.input_dlt)

        self.input_adb = QLineEdit(device.get("adb_path", ""))
        self.input_adb.setPlaceholderText("ADB Path")
        self.input_adb.setStyleSheet(input_style)
        self.input_adb.mousePressEvent = lambda event, input=self.input_adb: self.file(event, self.input_adb)

        # === Save Button ===
        self.save_btn = QPushButton("💾 Save Changes")
        self.save_btn.setFixedHeight(40)
        self.save_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-size: 14px;
                font-weight: bold;
                border-radius: 6px;
                padding: 6px 12px;
            }
            QPushButton:hover { background-color: #45A049; }
            QPushButton:pressed { background-color: #2E7D32; }
        """)
        self.save_btn.clicked.connect(self.save_device)

        # === Add all widgets ===
        for widget in [self.input_name, self.input_ip, self.input_port, self.input_dlt, self.input_adb]:
            layout.addWidget(widget)

        layout.addSpacing(10)
        layout.addWidget(self.save_btn, alignment=Qt.AlignCenter)
        layout.addStretch()

        self.E_page.setLayout(layout)

        self.stackedWidget.addWidget(self.E_page)
        self.stackedWidget.setCurrentWidget(self.E_page)


    def clear_form(self):
        self.input_name.clear()
        self.input_ip.clear()
        self.input_port.clear()
#settings page        
    def sched_page(self):
        page = Main_utils_page().page
        self.stackedWidget.addWidget(page)
        self.stackedWidget.setCurrentWidget(page)
        return page
    def use_page(self):
        self.E_page = QWidget()
        main_layout = QVBoxLayout(self.E_page)
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # === Header ===
        label = QLabel("Text to Speech")
        label.setAlignment(Qt.AlignCenter)
        label.setStyleSheet("""
            QLabel {
                color: #ffffff;
                font-size: 18px;
                font-weight: bold;
            }
        """)
        main_layout.addWidget(label)

        # === TOP HALF ===
        top_half = QWidget()
        top_layout = QHBoxLayout(top_half)
        top_layout.setSpacing(30)

        # --- LEFT SECTION (Inputs)
        left_layout = QVBoxLayout()
        left_layout.setSpacing(15)

        label_style = "QLabel { color: #ffffff; font-size: 15px; font-weight:bold ;}"
        input_style = """
            QLineEdit {
                background-color: #3B3B3B;
                color: white;
                border: 1px solid #555555;
                border-radius: 4px;
                padding: 6px;
            }
            QLineEdit:focus {
                border: 2px solid #007ACC;
            }
        """
        button_style = """
            QPushButton {
                background-color: #007ACC;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 6px 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #005A99;
            }
        """

        # --- Custom Words Section ---
        self.label = QLabel("Input Custom Words to Speak")
        self.label.setStyleSheet(label_style)
        self.Input_words = QLineEdit()
        self.Input_words.setPlaceholderText("Type words to speak...")
        self.Input_words.setStyleSheet(input_style)
        self.Input_words.setFixedHeight(30)
        self.btn_speak = QPushButton("Speak")
        self.btn_speak.setFixedWidth(120)
        self.btn_speak.setStyleSheet(button_style)
        self.btn_speak.clicked.connect(self.start_speak)

        left_layout.addWidget(self.label)
        left_layout.addWidget(self.Input_words)
        left_layout.addWidget(self.btn_speak, alignment=Qt.AlignLeft)

        # --- Excel File Section ---
        self.label_excel = QLabel("Use Custom Excel File")
        self.label_excel.setStyleSheet(label_style)
        self.Input_excel = QLineEdit()
        self.Input_excel.setPlaceholderText("Select Excel file path...")
        self.Input_excel.setStyleSheet(input_style)
        self.Input_excel.mousePressEvent = lambda event, input=self.Input_excel: self.file(event, input)
        self.Input_excel.setFixedHeight(30)
        self.btn_speak_excel = QPushButton("Start")
        self.btn_speak_excel.setFixedWidth(120)
        self.btn_speak_excel.setStyleSheet(button_style)
        self.btn_speak_excel.clicked.connect(self.start_file)

        left_layout.addWidget(self.label_excel)
        left_layout.addWidget(self.Input_excel)
        left_layout.addWidget(self.btn_speak_excel, alignment=Qt.AlignLeft)
        left_layout.addStretch()

        # --- RIGHT SECTION (GIF + Selector)
        right_layout = QVBoxLayout()
        right_layout.setSpacing(15)

        self.gif_label = QLabel()
        pixmap = QPixmap('src/assets/audio.png')
        self.gif_label.setFixedSize(240, 180)
        self.gif_label.setPixmap(pixmap)
        self.gif_label.setScaledContents(True)
        

        self.tts_selector = QComboBox()
        self.tts_selector.addItems(["pyttsx3", "gTTS"])
        self.tts_selector.setStyleSheet("""
            QComboBox {
                background-color: #3B3B3B;
                color: white;
                border: 1px solid #555555;
                border-radius: 4px;
                padding: 4px;
            }
            QComboBox::drop-down {
                border: none;
                background: transparent;
            }
        """)

        right_layout.addWidget(self.gif_label, alignment=Qt.AlignCenter)
        # right_layout.addWidget(self.tts_selector)
        right_layout.addStretch()

        # Add sections to top layout
        top_layout.addLayout(left_layout, 2)
        top_layout.addLayout(right_layout, 1)

        # === BOTTOM HALF ===
        bottom_half = QWidget()
        bottom_layout = QVBoxLayout(bottom_half)
        bottom_layout.setSpacing(10)

        self.bottom_label = QLabel("Temporary Area")
        self.bottom_label.setAlignment(Qt.AlignCenter)
        self.bottom_label.setStyleSheet(label_style)

        bottom_layout.addWidget(self.bottom_label)
        bottom_half.setLayout(bottom_layout)

        # === Final Composition ===
        main_layout.addWidget(top_half, 1)
        main_layout.addWidget(bottom_half, 1)

        return self.E_page

# #save device function called from config and edit pages
    def save_device(self):
        dev_name = self.input_name.text().strip()
        dev_ip = self.input_ip.text().strip()
        dev_port = self.input_port.text().strip()
        if dev_name.strip() == "" or dev_ip.strip() =="":
            QMessageBox.warning(self.page,"Empty Fields","empty fields warning")
            return
       
       
        if not os.path.exists(DEVICE_FILE) or os.stat(DEVICE_FILE).st_size == 0:
         with open(DEVICE_FILE, 'w') as f:
            f.write('[]')
        print(dev_name)
        print(dev_ip)
        if dev_name and  dev_ip :
            device_data = {
                "name": dev_name,
                "ip": dev_ip,
                "port": dev_port,
            }
        #device data holds each dict
        #devices hold the whole list
    
        with open(DEVICE_FILE , "r") as device_file:
            try:
                devices = json.load(device_file)
            except json.JSONDecodeError:
                devices = []
                
            #devices.append(device_data)    #removing beacuse we dont want duplicates due to editing
        if self.isEditing :
            for index,dev in enumerate(devices):
                if dev["name"] == self.isEditingDevName:
                    devices[index] = device_data
                    break
        else:
            devices.append(device_data)
        with open(DEVICE_FILE , "w") as file:
            json.dump(devices,file,indent=4)
            # print("saving to json file")
        
        self.clear_form()
        self.new_page = self.home_page()
        self.stackedWidget.addWidget(self.new_page)
        self.stackedWidget.setCurrentWidget(self.new_page)

    def file(self,event,input):
      file_dialog = QFileDialog()
      file_dialog.setWindowTitle("Open File")
      file_dialog.setFileMode(QFileDialog.FileMode.ExistingFile)
      file_dialog.setViewMode(QFileDialog.ViewMode.Detail)
      if file_dialog.exec():
         selected_files = file_dialog.selectedFiles()
        #  print("Selected File:", selected_files[0])
         input.setText(selected_files[0])
    
    def start_speak(self):
        text = self.Input_words.text()
        if text.strip() == '':
            QMessageBox.critical(self.E_page, "Empty Input Error", "Empty input exception occurred")
            return
        else :
            # self.movie.start()
            self.tts.tts_converter(text)
            t.sleep(3)
        # self.movie.stop()
    def start_file(self):
        file_path = self.Input_excel.text()
        if file_path == '':
            QMessageBox.critical(self.E_page, "Empty file Error", "Could not find file")
            return
        else:
            if file_path.endswith('xlsx' or 'xls'):
                print("excel file found")
                self.tts.file_iter(file_path=file_path)
            else:
                 QMessageBox.critical(self.E_page, "File Error","Could not find file")
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.btn_new_page.setText(_translate("MainWindow", "Add a Device"))
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_home_page.setText(_translate("MainWindow", "Home"))
        self.btn_sttings_page.setText(_translate("MainWindow", "Settings"))
        self.btn_general_page.setText(_translate("MainWindow", " TTS Speech"))
        self.btn_sched_page.setText(_translate('MainWindow','Test/Schedule'))
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("fusion")
    MainWindow = QtWidgets.QMainWindow()    
    MainWindow.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.CustomizeWindowHint | QtCore.Qt.WindowCloseButtonHint)
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle("Test Automation Runner")
    MainWindow.setWindowIcon(QIcon(r"C:\Users\Adin N S\Documents\Python_testing\src\assets\button.png"))
    MainWindow.show()
    sys.exit(app.exec_())
